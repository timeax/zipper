{
   "$id": "https://example.com/zipconfig.schema.json",
   "$schema": "https://json-schema.org/draft/2020-12/schema",
   "title": "Zipper Config",
   "type": "object",
   "properties": {
      "$schema": {
         "type": "string",
         "description": "Editor hint only; ignored by Zipper."
      },
      "deploy": {
         "type": "object",
         "description": "Remote deployment configuration keyed by backend.",
         "properties": {
            "default": {
               "type": "string",
               "enum": [
                  "shell",
                  "sftp",
                  "ftp"
               ],
               "description": "Default backend to use when none is specified."
            },
            "targets": {
               "type": "object",
               "properties": {
                  "shell": {
                     "$ref": "#/$defs/DeployShell"
                  },
                  "sftp": {
                     "$ref": "#/$defs/DeploySftp"
                  },
                  "ftp": {
                     "$ref": "#/$defs/DeployFtp"
                  }
               },
               "additionalProperties": false
            }
         },
         "required": [
            "targets"
         ],
         "additionalProperties": false
      },
      "hooks": {
         "type": "object",
         "additionalProperties": false,
         "properties": {
            "pre": {
               "type": "array",
               "items": {
                  "$ref": "#/$defs/HookItem"
               }
            },
            "post": {
               "type": "array",
               "items": {
                  "$ref": "#/$defs/HookItem"
               }
            }
         }
      },
      "out": {
         "type": "string",
         "description": "Output zip path (can include ${ENV_VARS})"
      },
      "root": {
         "type": "string",
         "description": "Project root used to resolve relative paths"
      },
      "include": {
         "type": "array",
         "description": "Glob patterns to include (gitignore-style, relative to root)",
         "items": {
            "type": "string"
         }
      },
      "exclude": {
         "type": "array",
         "description": "Glob patterns to exclude (relative to root)",
         "items": {
            "type": "string"
         }
      },
      "dot": {
         "type": "boolean",
         "description": "Whether to match dotfiles in globs (default true)"
      },
      "followSymlinks": {
         "type": "boolean",
         "description": "Whether to follow symlinks during scanning (default false)"
      },
      "order": {
         "description": "Rule precedence; either [\"include\",\"exclude\"] or [\"exclude\",\"include\"]",
         "type": "array",
         "prefixItems": [
            {
               "enum": [
                  "include",
                  "exclude"
               ]
            },
            {
               "enum": [
                  "include",
                  "exclude"
               ]
            }
         ],
         "items": false,
         "minItems": 2,
         "maxItems": 2
      },
      "presets": {
         "type": "array",
         "description": "Preset names to merge (in-order)",
         "items": {
            "type": "string"
         }
      },
      "respectGitignore": {
         "type": "boolean",
         "description": "Also treat .gitignore rules as excludes"
      },
      "ignoreFiles": {
         "type": "array",
         "description": "Additional ignore file paths to read (each line a pattern)",
         "items": {
            "type": "string"
         }
      },
      "fromList": {
         "type": "string",
         "description": "A file containing literal paths to include (one per line)"
      },
      "deterministic": {
         "type": "boolean",
         "description": "Deterministic packing (stable ordering, timestamps, etc.)"
      },
      "manifest": {
         "type": "boolean",
         "description": "Emit per-file MANIFEST.json inside the zip and a .sha256 alongside it"
      },
      "manifestPath": {
         "type": "string",
         "description": "Where to write the external manifest (defaults next to the zip)"
      },
      "groups": {
         "type": "object",
         "description": "Logical folder mapping for the archive (name â†’ group config)",
         "additionalProperties": {
            "$ref": "#/$defs/GroupConfig"
         }
      },
      "preprocess": {
         "type": "object",
         "description": "Preprocessor selection and runtime limits",
         "properties": {
            "includes": {
               "type": "array",
               "description": "Globs that must match for a file to be preprocessed",
               "items": {
                  "type": "string"
               }
            },
            "excludes": {
               "type": "array",
               "description": "Globs that exclude a file from preprocessing",
               "items": {
                  "type": "string"
               }
            },
            "files": {
               "type": "array",
               "description": "Explicit file paths (relative to root) to preprocess even if not matched by includes",
               "items": {
                  "type": "string"
               }
            },
            "handlers": {
               "type": "array",
               "description": "JS/TS-only: inline handlers (functions). Not representable in JSON/YAML; ignored here.",
               "items": {
                  "type": "string"
               }
            },
            "module": {
               "type": "string",
               "description": "Path to a single JS/TS module that exports handlers"
            },
            "modules": {
               "type": "array",
               "description": "Paths to JS/TS modules that export handlers",
               "items": {
                  "type": "string"
               }
            },
            "maxBytes": {
               "type": "integer",
               "minimum": 0,
               "description": "Skip preprocessing for files larger than this (still included unmodified)"
            },
            "binaryMode": {
               "type": "string",
               "enum": [
                  "skip",
                  "pass",
                  "buffer"
               ],
               "description": "How to treat binary files during preprocessing"
            },
            "timeoutMs": {
               "type": "integer",
               "minimum": 0,
               "description": "Per-file preprocess timeout"
            }
         },
         "additionalProperties": false
      }
   },
   "required": [
      "out"
   ],
   "additionalProperties": false,
   "$defs": {
      "GroupConfig": {
         "type": "object",
         "description": "Defines how a group maps files into the zip",
         "properties": {
            "target": {
               "type": "string",
               "description": "Where the group's files appear inside the zip (e.g., 'src/', 'web/')"
            },
            "include": {
               "type": "array",
               "description": "Globs that select files for this group (relative to root)",
               "items": {
                  "type": "string"
               }
            },
            "exclude": {
               "type": "array",
               "description": "Globs to exclude from this group (relative to root)",
               "items": {
                  "type": "string"
               }
            },
            "priority": {
               "type": "number",
               "description": "Higher number wins when multiple groups match (default 0)"
            },
            "files": {
               "type": "array",
               "description": "Explicit file paths (relative to root) to include in this group",
               "items": {
                  "type": "string"
               }
            }
         },
         "required": [
            "target"
         ],
         "anyOf": [
            {
               "required": [
                  "include"
               ]
            },
            {
               "required": [
                  "files"
               ]
            }
         ],
         "additionalProperties": false
      },
      "HookItem": {
         "oneOf": [
            {
               "type": "string"
            },
            {
               "type": "object",
               "properties": {
                  "run": {
                     "oneOf": [
                        {
                           "type": "string"
                        },
                        {
                           "type": "array",
                           "items": {
                              "type": "string"
                           },
                           "minItems": 1
                        }
                     ]
                  },
                  "shell": {
                     "type": "boolean"
                  },
                  "cwd": {
                     "type": "string"
                  },
                  "timeoutMs": {
                     "type": "integer",
                     "minimum": 0
                  },
                  "env": {
                     "type": "object",
                     "additionalProperties": {
                        "type": "string"
                     }
                  },
                  "continueOnError": {
                     "type": "boolean"
                  }
               },
               "required": [
                  "run"
               ],
               "additionalProperties": false
            }
         ]
      },
      /* ---------------- Deploy targets ---------------- */
      "RemoteBase": {
         "type": "object",
         "properties": {
            "host": {
               "type": "string"
            },
            "user": {
               "type": "string"
            },
            "domain": {
               "type": "string",
               "description": "Used to derive default webroot when not provided."
            },
            "preservePaths": {
               "type": "array",
               "items": {
                  "type": "string"
               }
            },
            "backupDir": {
               "type": "string"
            },
            "backupPrefix": {
               "type": "string"
            },
            "backupRetain": {
               "type": "integer",
               "minimum": 0
            },
            "webroot": {
               "type": "string"
            },
            "remoteTmp": {
               "type": "string"
            },
            "dryRun": {
               "type": "boolean"
            },
            "timeoutMs": {
               "type": "integer",
               "minimum": 0
            },
            "confirm": {
               "type": "string",
               "enum": [
                  "auto",
                  "always",
                  "never"
               ]
            },
            "extraEnv": {
               "type": "object",
               "additionalProperties": {
                  "type": "string"
               }
            }
         },
         "required": [
            "host"
         ],
         "additionalProperties": false
      },
      "DeployShell": {
         "allOf": [
            {
               "$ref": "#/$defs/RemoteBase"
            },
            {
               "type": "object",
               "description": "SSH-based deploy using shell scripts (upload.sh / restore.sh).",
               "properties": {
                  "zipPath": {
                     "type": "string"
                  },
                  "sshPort": {
                     "type": "integer"
                  },
                  "sshKeyPath": {
                     "type": "string"
                  },
                  "sshOpts": {
                     "type": "string"
                  }
               },
               "additionalProperties": false
            }
         ]
      },
      "DeploySftp": {
         "allOf": [
            {
               "$ref": "#/$defs/RemoteBase"
            },
            {
               "type": "object",
               "properties": {
                  "user": {
                     "type": "string"
                  }, /* override optional to required for SFTP */
                  "password": {
                     "type": "string"
                  },
                  "zipPath": {
                     "type": "string"
                  },
                  "port": {
                     "type": "integer"
                  },
                  "concurrency": {
                     "type": "integer",
                     "minimum": 1
                  },
                  "yes": {
                     "type": "boolean"
                  }
               },
               "required": [
                  "user"
               ],
               "additionalProperties": false
            }
         ]
      },
      "DeployFtp": {
         "allOf": [
            {
               "$ref": "#/$defs/RemoteBase"
            },
            {
               "type": "object",
               "properties": {
                  "user": {
                     "type": "string"
                  },
                  "password": {
                     "type": "string"
                  },
                  "zipPath": {
                     "type": "string"
                  },
                  "secure": {
                     "type": "string",
                     "enum": [
                        "none",
                        "explicit",
                        "implicit"
                     ]
                  },
                  "port": {
                     "type": "integer"
                  },
                  "secureOptions": {
                     "type": "object",
                     "additionalProperties": true
                  },
                  "concurrency": {
                     "type": "integer",
                     "minimum": 1
                  },
                  "yes": {
                     "type": "boolean"
                  }
               },
               "required": [
                  "user",
                  "password"
               ],
               "additionalProperties": false
            }
         ]
      }
   }
}